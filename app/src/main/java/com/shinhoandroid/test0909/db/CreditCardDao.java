package com.shinhoandroid.test0909.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.shinhoandroid.test0909.bean.CreditCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CREDIT_CARD".
*/
public class CreditCardDao extends AbstractDao<CreditCard, Void> {

    public static final String TABLENAME = "CREDIT_CARD";

    /**
     * Properties of entity CreditCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property CardNum = new Property(2, String.class, "cardNum", false, "CARD_NUM");
    }

    private Query<CreditCard> student_MCreditCardsQuery;

    public CreditCardDao(DaoConfig config) {
        super(config);
    }
    
    public CreditCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREDIT_CARD\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"CARD_NUM\" TEXT);"); // 2: cardNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREDIT_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreditCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(3, cardNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreditCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(3, cardNum);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CreditCard readEntity(Cursor cursor, int offset) {
        CreditCard entity = new CreditCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // cardNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CreditCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CreditCard entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CreditCard entity) {
        return null;
    }

    @Override
    public boolean hasKey(CreditCard entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mCreditCards" to-many relationship of Student. */
    public List<CreditCard> _queryStudent_MCreditCards(Long id) {
        synchronized (this) {
            if (student_MCreditCardsQuery == null) {
                QueryBuilder<CreditCard> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                student_MCreditCardsQuery = queryBuilder.build();
            }
        }
        Query<CreditCard> query = student_MCreditCardsQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
